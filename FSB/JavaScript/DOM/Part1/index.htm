<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    <h5>Playing With The DOM!!!</h5>
    <button onclick="greetMe()"><h6>What is the time by your clock???</h6></button>
    <script src="./main.js"></script>
</body>
</html> -->



<!-- Referencing to an External JavaScript File

So, we can create a file named main.js right besides the HTML and CSS files and use a script tag, only this time, we’ll use the src or source property to refer to this external file. This brings in the JS file and you can tuck away all your code in one or more JS files.  

So, let us create a function that returns the time. And we’ll create another one, which renders a console.log and displays the time. -->

<!-- Back in the HTML file, we'll create a unique property on a button called onclick. We’re telling the browser that if someone clicks on the button, we need to execute the greetMe function which would be available to the webpage to execute though it comes from an external file. The onclick property creates an event listener in the browser.  -->

<!-- Later on, we’ll delegate this work to JavaScript, but for now, let’s stick to this code. We’ll refresh the page in the browser and now if we hit the button on the page, we get the time here in the console.  

This is running within the HTML file which we’ve loaded using the file protocol directly from disk. This has limitations and should never be used as a standard practice during web development. 

Instead, you should serve your web pages using a web server. In the first module, we talked about installing Node.js. Because now, you can open the console and type npx http-serve and this will download and execute a simple HTTP server right in this folder. 

You get these URLs of which we can use the topmost URL which uses the localhost IP address on port 8080 to access the site which is being served using the HTTP protocol. 

This would never cause any problems.But again, for our purposes, we don’t need to do all this because we have a complete toolchain and kit-built right for now and we briefly discussed this in the first module. 

So to create a complete end-to-end toolchain, you have to type this on the terminal where hello-js is the name of the folder which contains the setup. 

Once setup, we can go into the folder and type npm run dev and press enter and this kicks up a complete end-to-end server with a local URL as seen here. 

Just open this in your browser. We get an HTML page where you can see the use of a script tag with its type set to module which we’ll come back to later. For now, there is one thing you should know here that if build the same example as we did before, it wouldn’t work under this arrangement because of the way our toolchain handles the JavaScript code here.  -->









<!-- The code which you have seen on the screen is running within this HTML file which we have loaded using the file protocol directly from the disk -->

<!-- type this to create js application "npx @knowledgehut/create-js-app hello-js" -->

<!-- type cd "folder name" then type "npm run dev" -->

<!-- type to open html page on browser "npx http-serve" -->





<!-- Another file -->

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Your JavaScript Playground</title>
    <link rel="stylesheet" href="./css/style.css" />
</head>

<body>
    <div id="main">
        <h1 id="site-title">RedDot Technologies</h1>
        <ul id="nav">
            <li>Home</li>
            <li>About Us</li>
            <li>Our Services</li>
            <li>Contact Us</li>
        </ul>

        <img src="./img/head.webp" alt="RedDot" id="site-head-img" />
        <h3 id="site-description">Your trusted partner!</h3>
        <div class="content">
            <p class="content-text">
                We at RedDot Technologies are proud of our technological heritage in
                bringing to you the best in web and cloud based services.
            </p>
            <p class="content-text">
                We're ready to march with you, into the future as we empower your
                business to go beyond the browser.
            </p>
        </div>
    </div>
    <script type="module" src="./main.js"></script>
</body>

</html>


