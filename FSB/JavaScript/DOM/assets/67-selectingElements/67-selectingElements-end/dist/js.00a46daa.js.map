{"version":3,"sources":["js/index.js"],"names":["siteTitle","document","getElementById","innerText","navEl","getElementsByTagName","Array","from","forEach","el","contentText","getElementsByClassName","toUpperCase","siteDesc","querySelector","replace","contentDiv","style","backgroundColor","textAlign","altNavs","querySelectorAll"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAMA,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC;;AAEvD;AACAF,SAAS,CAACG,SAAS,GAAG,sBAAsB;;AAE5C;AACA;;AAIA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;AACA;AACA,MAAMC,KAAK,GAAGH,QAAQ,CAACI,oBAAoB,CAAC,IAAI,CAAC;AACjD;AACA;AACA;;AAEA;AACA;;AAEA;AACAC,KAAK,CAACC,IAAI,CAACH,KAAK,CAAC,CAACI,OAAO,CAAEC,EAAE,IAAMA,EAAE,CAACN,SAAS,GAAI,MAAKM,EAAE,CAACN,SAAU,KAAK,CAAC;;AAE3E;AACA;AACA;;AAIA,MAAMO,WAAW,GAAGT,QAAQ,CAACU,sBAAsB,CAAC,cAAc,CAAC;AAEnEL,KAAK,CAACC,IAAI,CAACG,WAAW,CAAC,CAACF,OAAO,CAC5BC,EAAE,IAAMA,EAAE,CAACN,SAAS,GAAGM,EAAE,CAACN,SAAS,CAACS,WAAW,CAAC,CACnD,CAAC;AAID,MAAMC,QAAQ,GAAGZ,QAAQ,CAACa,aAAa,CAAC,mBAAmB,CAAC;AAE5DD,QAAQ,CAACV,SAAS,GAAGU,QAAQ,CAACV,SAAS,CAACY,OAAO,CAC3C,aAAa,EACb,sBACJ,CAAC;AAID,MAAMC,UAAU,GAAGf,QAAQ,CAACa,aAAa,CAAC,UAAU,CAAC;AACrDE,UAAU,CAACC,KAAK,CAACC,eAAe,GAAG,MAAM;AACzCF,UAAU,CAACC,KAAK,CAACE,SAAS,GAAG,SAAS;AAItC,MAAMC,OAAO,GAAGnB,QAAQ,CAACoB,gBAAgB,CAAC,4BAA4B,CAAC;AACvED,OAAO,CAACZ,OAAO,CAAEC,EAAE,IAAMA,EAAE,CAACQ,KAAK,CAACC,eAAe,GAAG,iBAAkB,CAAC;;AAIvE;;AAEA;;AAIA;AACA,CAAC;;AAED;AACA","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["// Here we can learn DOM selectors\n// In case of existing HTML markup you need specialised method known as DOM selectors.\n// You typically get 5 core DOM selectors as listed here...\n\n// document.getElementById(id);\n// document.getElementsByTagName(tagname);\n// document.getElementsByClassName(classname);\n// document.querySelector(element_name_or_css_selectors);\n// document.querySelectorAll(element_name_or_css_selectors);\n\n// Whenever these methods are called they transverse the DOM to find the element requested and return an active\n// handle which can then be used to access that element properties for manipulation.\n\n\n\n\n\n\n// So, here we have a web page with some HTML elments we have to select them by using above methods for\n// manipulate them. The first thing we want to do is change this title to \"Dim Mission Space Tech\" for this\n// purpose we need to select this element and h1 tag with the id set to \"site-title\". This is the perfect\n// opportunity to play with the document.getElementById selector... which gives the id of the element in question.\n// This is always return a single element the first one that matches the id.\n\n// The \"const\" \"siteTitle\" now actively points to the h1 tag in the page with the \"id\" \"site-title\". Using this\n// we can select our inner text method to update the text contents of this h1 tag like so...\nconst siteTitle = document.getElementById('site-title');\n\n// Manipulation\nsiteTitle.innerText = 'Dynamation SpaceTech';\n\n// It is important to note here that when you use variables or constants to store variables as you have done here\n// you are caching the selector, a recommend practice.\n\n\n\n// Remember one thing no matter how cool DOM manipulation looks, there is a cost attached. Every time you invoke\n// one of these selectors to transverse and select element, there is a performance cost involved. It is fair to say\n// that the DOM isn't the most optimised interface even though modern browsers are really good at optimising\n// the entire process of DOM manipulation. But it goes without saying that to many transversal and manipulation can\n// slow down the performance of your webpage and the application.\n\n// By caching you don't have to transverse and select every time, thereby improving overall performance.\n\n\n\n// Now we update our navigation elements, this is done by selecting list element first with the help of\n// document.getElementsByTagName(\"li\") method which operates on element type.\nconst navEl = document.getElementsByTagName('li');\n// console.log(navEl);\n// So here we have a list of \"li\" elements. We use \"forOf\" loop on this HTML collection and it provides access to\n// each element.\n\n// Another way to gain access for manipulation is using \"array.from\" to convert a HTML collection to an array\n// after which we can use for each...\n\n// Here we update each element \nArray.from(navEl).forEach((el) => (el.innerText = `-- ${el.innerText} --`));\n\n// An imp point here is to note that, when you access innertext it acts like a getter and get's you the text\n// contained in the element selected. But when you use an equal to sign to assign a string, the same innertext\n// propety acts like a setter, updating the DOM in the process.\n\n\n\nconst contentText = document.getElementsByClassName('content-text');\n\nArray.from(contentText).forEach(\n  (el) => (el.innerText = el.innerText.toUpperCase())\n);\n\n\n\nconst siteDesc = document.querySelector('#site-description');\n\nsiteDesc.innerText = siteDesc.innerText.replace(\n    'DynTech LLC',\n    'Dynamation SpaceTech'\n);\n\n\n\nconst contentDiv = document.querySelector('.content');\ncontentDiv.style.backgroundColor = '#fff';\ncontentDiv.style.textAlign = 'justify';\n\n\n\nconst altNavs = document.querySelectorAll('#nav > li:nth-of-type(odd)');\naltNavs.forEach((el) => (el.style.backgroundColor = 'rgba(0,0,0,0.5)'));\n\n\n\n// document.getElementById() is used to select an element based on element’s id attribute.\n\n// document.getElementsByTagName() is used to select an element based on tag name used to create the element.\n\n\n\n// How do you select the following element?\n{/* <input class=‘language' name=‘language' type=“text\"/> */}\n\n// Here, input has class attribute, hence we can select the element using document.getElementsByClassName()\n// since it is used to select an element based on element’s class attribute."]}