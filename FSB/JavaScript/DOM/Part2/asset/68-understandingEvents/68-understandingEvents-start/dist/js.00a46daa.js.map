{"version":3,"sources":["js/index.js"],"names":["quotes","nelsonMandela","steveJobs","johnLennon","anneFrank","quoteOut","document","querySelector","nelsonMBtn","steveJBtn","johnLBtn","anneFBtn","addEventListener","innerText"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAOA;;AAEA;;AAEA;;AAEA;;AAEA;;AAGA,MAAMA,MAAM,GAAG;EACXC,aAAa,EAAG,6GAA4G;EAC5HC,SAAS,EAAG,6KAA4K;EACxLC,UAAU,EAAG,2EAA0E;EACvFC,SAAS,EAAG;AAChB,CAAC;AAED,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;AACjD,MAAMC,UAAU,GAAGF,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;AAC5D,MAAME,SAAS,GAAGH,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;AACvD,MAAMG,QAAQ,GAAGJ,QAAQ,CAACC,aAAa,CAAC,cAAc,CAAC;AACvD,MAAMI,QAAQ,GAAGL,QAAQ,CAACC,aAAa,CAAC,aAAa,CAAC;;AAGtD;;AAEA;;AAGAC,UAAU,CAACI,gBAAgB,CACvB,OAAO,EACP,MAAOP,QAAQ,CAACQ,SAAS,GAAGb,MAAM,CAACC,aACvC,CAAC;;AAGD;;AAGAQ,SAAS,CAACG,gBAAgB,CACtB,OAAO,EACP,MAAOP,QAAQ,CAACQ,SAAS,GAAGb,MAAM,CAACE,SACvC,CAAC;AAEDQ,QAAQ,CAACE,gBAAgB,CACrB,OAAO,EACP,MAAOP,QAAQ,CAACQ,SAAS,GAAGb,MAAM,CAACG,UACvC,CAAC;AAEDQ,QAAQ,CAACC,gBAAgB,CACrB,OAAO,EACP,MAAOP,QAAQ,CAACQ,SAAS,GAAGb,MAAM,CAACI,SACvC,CAAC;;AAED;;AAGA;;AAGA;;AAGA","file":"js.00a46daa.js","sourceRoot":"..\\src","sourcesContent":["// const morningBtn = document.querySelector('#morning');\n// const dayBtn = document.querySelector('#day');\n// const afternoonBtn = document.querySelector('#afternoon');\n// const eveningBtn = document.querySelector('#evening');\n// const nightBtn = document.querySelector('#night');\n// const greeting = document.querySelector('#greeting');\n\n\n// morningBtn.addEventListener(\n//     'click',\n//     () => (greeting.innerText = 'Good Morining')\n// )\n\n// dayBtn.addEventListener(\n//     'click',\n//     () => (greeting.innerText = 'Good Day')\n// )\n\n// afternoonBtn.addEventListener(\n//     'click',\n//     () => (greeting.innerText = 'Good Afternoon')\n// )\n\n// eveningBtn.addEventListener(\n//     'click',\n//     () => (greeting.innerText = 'Good Evening')\n// );\n\n// nightBtn.addEventListener(\n//     'click',\n//     () => (greeting.innerText = 'Good Night')\n// );\n\n\n\n\n\n\n// Anothr Example (id = main2) :\n\n// The web is all about interaction. And interaction is made possible by way of the event system. In a nutshell, an event is an occurrence like the click of a button, the user typing in an input field, scrolling the page, moving the mouse pointer and several others. As a developer you can assign specialized asynchronous functions which are set to execute every time a given event occurs. This is made possible using an event listener, a special method that watches for an event on a given element and executes an attached callback function when the event occurs.\n\n// The webpage for this exercise displays four buttons, each named after an illustrious icon from world history. The objective is to see a quote by the individual once the button is pressed. Open the src/index.html if not open already and observe the HTML markup. There is an h1 tag with the id ‘quote’. This is where the quote should be displayed.\n\n// The buttons each have a unique id. Now open the src/js/index.js file. You’ll notice we have an object called quotes with a quote each from the individuals listed on the page.\n\n// Our first task is to create DOM selectors for the buttons as well as the h1 with the id ‘quote’ where the quote needs to be displayed. So, begin by setting up your selectors using the code shown below.\n\n\nconst quotes = {\n    nelsonMandela: `\"The greatest glory in living lies not in never falling, but in rising every time we fall\" - Nelson Mandela`,\n    steveJobs: `\"Your time is limited, so don't waste it living someone else's life. Don't be trapped by dogma – which is living with the results of other people's thinking.\" - Steve Jobs`,\n    johnLennon: `\"Life is what happens when you're busy making other plans.\" - John Lennon`,\n    anneFrank: `\"Whoever is happy will make others happy too.\" - Anne Frank`,\n};\n\nconst quoteOut = document.querySelector('#quote');\nconst nelsonMBtn = document.querySelector('#nelson-mandela');\nconst steveJBtn = document.querySelector('#steve-jobs');\nconst johnLBtn = document.querySelector('#john-lennon');\nconst anneFBtn = document.querySelector('#anne-frank');\n\n\n// Our next task is to setup event listeners on individual buttons to monitor for mouse clicks. This can be done using the addEventListener() method which can be attached to individual DOM selectors for the buttons.\n\n// Let’s begin with the Nelson Mandela button. Add the following code to equip this button to listen for mouse clicks and in response set the text content of the #quote element to a quote by Nelson Mandela.\n\n\nnelsonMBtn.addEventListener(\n    'click',\n    () => (quoteOut.innerText = quotes.nelsonMandela)\n);\n\n\n// Try clicking the Nelson Mandela button now. Do you get the quote on the page? If so, congratulations, you’ve just implemented an event listener. In the same fashion, the code below equips the other three buttons with the same functionality.\n\n\nsteveJBtn.addEventListener(\n    'click',\n    () => (quoteOut.innerText = quotes.steveJobs)\n);\n\njohnLBtn.addEventListener(\n    'click',\n    () => (quoteOut.innerText = quotes.johnLennon)\n);\n\nanneFBtn.addEventListener(\n    'click',\n    () => (quoteOut.innerText = quotes.anneFrank)\n);\n\n// And that’s it. Try clicking all the buttons and read interesting quotes by these iconic figures from our world’s history.\n\n\n// Not all JavaScript statements are events but any user action/interaction can be treated as an event. E.g, clicking on a button, hovering over an element using mouse.\n\n\n// element.addEventListener() is used to attach a event listener to an element. Eg, document.getElementById(‘submitBtn’).addEventListener(‘click’, onClickFunc) is used for calling onClickFun whenever user clicks the element whose id is submitBtn\n\n\n// element.innerText is used to change the text inside the tags. Hence, document.getElementById(‘greet’).innerText = ‘good night’ is the correct answer."]}